<?php


namespace Elasticsearch;


class GoodsSearch extends BaseElasticSearch
{
    /**
     * 映射字段
     * @var string
     */
    private $index_search = 'goods';
    /**
     * 有效
     * @var int
     */
    private $valid = 0;
    /**
     * 无效
     * @var int
     */
    private $invalid = 1;

    public function __construct()
    {
        parent::__construct($this->index_search);
    }

    /**
     * @Notes:重写保存方法，指定记录id
     * @param $data
     * @return mixed
     * @User: Hans
     * @Date: 2021/3/10
     * @Time: 上午10:19
     */
    public function save($data)
    {
        $this->params['id'] = $data['id'];
        return parent::save($data); // TODO: Change the autogenerated stub
    }

    /**
     * @Notes:重写指定字段的查询条件
     * @param $params
     * @return array|mixed
     * @User: Hans
     * @Date: 2021/3/10
     * @Time: 上午10:19
     */
    public function findByQuery($params)
    {
        $must = $mustNot = $should = [];
        if (isset($params['merchant_id']) && !empty($params['merchant_id'])) {
            if (is_array($params['merchant_id'])) {
                // in查询
                $must[] = ['terms' => ['merchant_id' => $params['merchant_id']]];
            } else {
                // =查询
                $must[] = ['match' => ['merchant_id' => $params['merchant_id']]];
            }
        }

        if (isset($params['merchant_type']) && !empty($params['merchant_type'])) {
            array_push($must, ['match' => ['merchant_type' => $params['merchant_type']]]);
        }

        if (isset($params['keyword']) && !empty($params['keyword'])) {
//            $this->params['body']['query']['wildcard'] = [
//                'name' => "{$params['keyword']}*"
//            ];
//            $this->params['body']['query']['match'] = [
//                'name' => [
//                    'query'=>"{$params['keyword']}",
//                    'analyzer' => 'ik_max_word'
//                ]
//            ];
            //todo 还未实现模糊查询
//            $this->params['body']['query']['match'] = [
//                'name' => $params['keyword']
//            ];
//            array_push($must, ['wildcard' =>['name' => ['wildcard' => "%{$params['keyword']}%"]]]);
            array_push($must, ['match' =>['name' => [
                'query'=>"*{$params['keyword']}*",
                'analyzer' => 'ik_max_word'
            ]]]);
        }

        if (isset($params['status']) && !empty($params['status'])) {
            array_push($must, ['match' => ['status' => $params['status']]]);
        }

        if (isset($params['cate']) && !empty($params['cate'])) {
            array_push($must, ['match' => ['cate' => $params['cate']]]);
        }

        //爆品查询
        if (isset($params['is_hot']) && is_numeric($params['is_hot'])) {
            array_push($must, ['match' => ['is_hot' => $params['is_hot']]]);
        }
        //商品品类查询
        if (isset($params['category_id'])) {
            if (is_array($params['category_id'])) {
                $must[] = ['terms' => ['category_id' => $params['category_id']]];
            } elseif (is_numeric($params['category_id'])) {
                array_push($must, ['match' => ['category_id' => $params['category_id']]]);
            }
        }
        //获取有效数据
        array_push($must, ['match' => ['is_delete' => $this->valid]]);
        //默认分页为10
        if (isset($params['page']) && !empty($params['page'])) {
            $this->params['from'] = ($params['page']-1)*$params['page_size'];
            $this->params['size'] = $params['page_size'] ?? 10;
        }
        return parent::findByQuery(['must' => $must]);
    }
}
